<svg width="300" height="60" viewBox="0 0 300 60" xmlns="http://www.w3.org/2000/svg">
  <style>
    .logo-text { font-family: Arial, sans-serif; font-size: 24px; font-weight: bold; }
    #cursor { animation: blink 0.7s infinite; }
    @keyframes blink { 0%, 100% { opacity: 0; } 50% { opacity: 1; } }
  </style>
  
  <defs>
    <linearGradient id="textGradient" x1="0%" y1="0%" x2="100%" y2="0%">
      <stop offset="0%" style="stop-color:#4A90E2;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#50E3C2;stop-opacity:1" />
    </linearGradient>
  </defs>

  <text id="learnText" x="10" y="40" class="logo-text" fill="url(#textGradient)">Learn</text>
  <text id="dynamicText" x="85" y="40" class="logo-text" fill="white"></text>
  <text id="ioText" x="85" y="40" class="logo-text" fill="#50E3C2">.IO</text>
  <text id="cursor" x="85" y="40" class="logo-text" fill="white">|</text>

  <script type="text/javascript"><![CDATA[
    const phrases = [
      "Gen",
      "SomethingNew",
      "AboutYourself",
      "BecauseItsFun",
      "ToBe",
      "Learning"
    ];
    
    const learnText = document.getElementById('learnText');
    const dynamicText = document.getElementById('dynamicText');
    const ioText = document.getElementById('ioText');
    const cursor = document.getElementById('cursor');
    let currentPhraseIndex = 0;

    function sleep(ms) {
      return new Promise(resolve => setTimeout(resolve, ms));
    }

    function updatePositions() {
      const learnWidth = learnText.getComputedTextLength();
      const dynamicWidth = dynamicText.getComputedTextLength();
      dynamicText.setAttribute('x', 10 + learnWidth + 5); // 5px gap after "Learn"
      cursor.setAttribute('x', 10 + learnWidth + dynamicWidth + 5);
      ioText.setAttribute('x', 10 + learnWidth + dynamicWidth + 5);
    }

    async function typeText(text) {
      for (let i = 0; i <= text.length; i++) {
        dynamicText.textContent = text.substring(0, i);
        updatePositions();
        await sleep(100);
      }
    }

    async function deleteText() {
      const text = dynamicText.textContent;
      for (let i = text.length; i >= 0; i--) {
        dynamicText.textContent = text.substring(0, i);
        updatePositions();
        await sleep(50);
      }
    }

    async function animateLoop() {
      while (true) {
        await typeText(phrases[0]); // Always start with "Gen"
        await sleep(5000); // LearnGen.IO displayed for 5 seconds
        await deleteText();
        currentPhraseIndex = (currentPhraseIndex + 1) % phrases.length;
        if (currentPhraseIndex === 0) currentPhraseIndex = 1; // Skip "Gen" in the rotation
        await typeText(phrases[currentPhraseIndex]);
        await sleep(3000); // Alternative phrase displayed for 3 seconds
        await deleteText();
      }
    }

    updatePositions(); // Initial positioning
    animateLoop();
  ]]></script>
</svg>